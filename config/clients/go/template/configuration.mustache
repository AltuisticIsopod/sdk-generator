{{>partial_header}}
package {{packageName}}

import (
	"net/http"
	"strings"
)

// RetryParams configures configuration for retry in case of HTTP too many request
type RetryParams struct {
	MaxRetry       int               `json:"maxRetry,omitempty"`
	MinWaitInMs    int               `json:"minWaitInMs,omitempty"`
}

// Configuration stores the configuration of the API client
type Configuration struct {
	ApiScheme      string            `json:"apiScheme,omitempty"`
	ApiHost        string            `json:"apiHost,omitempty"`
	StoreId        string            `json:"storeId,omitempty"`
	ApiTokenIssuer string            `json:"apiTokenIssuer,omitempty"`
	ApiAudience    string            `json:"apiAudience,omitempty"`
	ClientId       string            `json:"clientId,omitempty"`
	ClientSecret   string            `json:"clientSecret,omitempty"`
	DefaultHeaders map[string]string `json:"defaultHeader,omitempty"`
	UserAgent      string            `json:"userAgent,omitempty"`
	Debug          bool              `json:"debug,omitempty"`
	HTTPClient     *http.Client
	RetryParams    *RetryParams
}

// DefaultRetryParams returns the default retry parameters
func DefaultRetryParams() *RetryParams {
	return &RetryParams{
		MaxRetry: {{{defaultMaxRetry}}},
		MinWaitInMs: {{{defaultMinWaitInMs}}},
	}
}

func GetSdkUserAgent() string {
	userAgent := strings.Replace("{{#userAgent}}{{{.}}}{{/userAgent}}", "{sdkId}", "{{sdkId}}", -1)
	userAgent = strings.Replace(userAgent, "{packageVersion}", "{{packageVersion}}", -1)

    return userAgent
}

// NewConfiguration returns a new Configuration object
func NewConfiguration(config Configuration) (*Configuration, error) {
	cfg := &Configuration{
		ApiScheme:      config.ApiScheme,
		ApiHost:        config.ApiHost,
		StoreId:        config.StoreId,
		ApiTokenIssuer: config.ApiTokenIssuer,
		ApiAudience:    config.ApiAudience,
		ClientId:       config.ClientId,
		ClientSecret:   config.ClientSecret,
		DefaultHeaders: make(map[string]string),
		UserAgent:      GetSdkUserAgent(),
		Debug:          false,
		RetryParams:    config.RetryParams,
	}

    if cfg.ApiScheme == "" {
        cfg.ApiScheme = "https"
    }

    err := cfg.ValidateConfig()

    if err == nil {
        return cfg, nil
    }

    return nil, err
}

// AddDefaultHeader adds a new HTTP header to the default header in the request
func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeaders[key] = value
}

// ValidateConfig ensures that the given configuration is valid
func (c *Configuration) ValidateConfig() error {
    if c.ApiHost == "" {
        return reportError("Configuration.ApiHost is required")
    }

    if c.ApiScheme == "" {
        return reportError("Configuration.ApiScheme is required")
    }

    if c.StoreId == "" {
        return reportError("Configuration.StoreId is required")
    }

    if (c.ClientId != "" || c.ClientSecret != "") && (c.ClientId == "" || c.ClientSecret == "" || c.ApiAudience == "" || c.ApiTokenIssuer == "") {
        return reportError("Configuration.ClientId or Configuration.ClientSecret is set, so all of Configuration.ClientId, Configuration.ClientSecret, Configuration.ApiAudience and Configuration.ApiTokenIssuer are required")
    }

    if c.RetryParams != nil && c.RetryParams.MaxRetry > {{retryMaxAllowedNumber}} {
        return reportError("Configuration.RetryParams.MaxRetry exceeds maximum allowed limit of {{retryMaxAllowedNumber}}")
    }

    return nil
}