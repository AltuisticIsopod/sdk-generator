Without an API Token

```golang
import (
    openfga "github.com/openfga/go-sdk"
    "os"
)

func Main() {
    configuration, err := openfga.NewConfiguration(openfga.Configuration{
        ApiScheme:      os.Getenv("OPENFGA_API_SCHEME"), // optional, defaults to "https"
        ApiHost:        os.Getenv("OPENFGA_API_HOST"), // required, define without the scheme (e.g. api.fga.example instead of https://api.fga.example)
        StoreId:        os.Getenv("OPENFGA_STORE_ID"),
    })

    if err != nil {
    // .. Handle error
    }

    apiClient := openfga.NewAPIClient(configuration)
}
```

With an API Token

```golang
import (
    openfga "github.com/openfga/go-sdk"
    "os"
)

func Main() {
    configuration, err := openfga.NewConfiguration(openfga.Configuration{
        ApiScheme:      os.Getenv("OPENFGA_API_SCHEME"), // optional, defaults to "https"
        ApiHost:        os.Getenv("OPENFGA_API_HOST"), // required, define without the scheme (e.g. api.fga.example instead of https://api.fga.example)
        StoreId:        os.Getenv("OPENFGA_STORE_ID"),
        Credentials: &credentials.Credentials{
            Method: credentials.CredentialsMethodApiToken,
            Config: {
                ApiToken: "fga_abcdef", // will be passed in the "Authorization: Bearer ${ApiToken}" header
            },
        },
    })

    if err != nil {
    // .. Handle error
    }

    apiClient := openfga.NewAPIClient(configuration)
}
```
