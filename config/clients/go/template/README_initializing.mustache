Without an API Token

```golang
import (
    {{#lambda.lowercase}}{{appShortName}}{{/lambda.lowercase}} "{{gitHost}}/{{gitUserId}}/{{gitRepoId}}"
    "os"
)

func main() {
    configuration, err := {{packageName}}.NewConfiguration({{packageName}}.Configuration{
        ApiScheme:      os.Getenv("{{appUpperCaseName}}_API_SCHEME"), // optional, defaults to "https"
        ApiHost:        os.Getenv("{{appUpperCaseName}}_API_HOST"), // required, define without the scheme (e.g. api.{{sampleApiDomain}} instead of https://api.{{sampleApiDomain}})
        StoreId:        os.Getenv("{{appUpperCaseName}}_STORE_ID"),
    })

    if err != nil {
    // .. Handle error
    }

    apiClient := openfga.NewAPIClient(configuration)
}
```

With an API Token

```golang
import (
    {{#lambda.lowercase}}{{appShortName}}{{/lambda.lowercase}} "{{gitHost}}/{{gitUserId}}/{{gitRepoId}}"
    "os"
)

func main() {
    configuration, err := {{packageName}}.NewConfiguration({{packageName}}.Configuration{
        ApiScheme:      os.Getenv("{{appUpperCaseName}}_API_SCHEME"), // optional, defaults to "https"
        ApiHost:        os.Getenv("{{appUpperCaseName}}_API_HOST"), // required, define without the scheme (e.g. api.{{sampleApiDomain}} instead of https://api.{{sampleApiDomain}})
        StoreId:        os.Getenv("{{appUpperCaseName}}_STORE_ID"),
        Credentials: &credentials.Credentials{
            Method: credentials.CredentialsMethodApiToken,
            Config: {
                ApiToken: "fga_abcdef", // will be passed as the "Authorization: Bearer ${ApiToken}" request header
            },
        },
    })

    if err != nil {
    // .. Handle error
    }

    apiClient := openfga.NewAPIClient(configuration)
}
```
