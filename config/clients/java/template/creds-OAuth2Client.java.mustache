{{>licenseInfo}}
package {{authPackage}};

import com.fasterxml.jackson.databind.ObjectMapper;
import {{invokerPackage}}.*;
import {{configPackage}}.*;
import {{errorsPackage}}.ApiException;
import {{errorsPackage}}.FgaInvalidParameterException;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpRequest;
import java.time.Instant;
import java.util.concurrent.CompletableFuture;

public class OAuth2Client {
    public static final String DEFAULT_TOKEN_ENDPOINT_PATH = "/oauth/token";
    private final ApiClient apiClient;
    private final AccessToken token = new AccessToken();
    private final CredentialsFlowRequest authRequest;
    private final String tokenEndpointUrl;

    /**
     * Initializes a new instance of the {@link OAuth2Client} class
     *
     * @param configuration Configuration, including credentials, that can be used to retrieve an access tokens
     */
    public OAuth2Client(Configuration configuration, ApiClient apiClient) {
        Credentials credentials = configuration.getCredentials();
        this.apiClient = apiClient;
        this.tokenEndpointUrl = buildTokenEndpointUrl(credentials.getClientCredentials().getApiTokenIssuer());
        this.authRequest = new CredentialsFlowRequest();
        this.authRequest.setClientId(credentials.getClientCredentials().getClientId());
        this.authRequest.setClientSecret(credentials.getClientCredentials().getClientSecret());
        this.authRequest.setAudience(credentials.getClientCredentials().getApiAudience());
        this.authRequest.setGrantType("client_credentials");
    }

    /**
     * Gets an access token, handling exchange when necessary. The access token is naively cached in memory until it
     * expires.
     *
     * @return An access token in a {@link CompletableFuture}
     */
    public CompletableFuture<String> getAccessToken() throws FgaInvalidParameterException, ApiException {
        if (!token.isValid()) {
            return exchangeToken().thenCompose(response -> {
                token.setToken(response.getAccessToken());
                token.setExpiresAt(Instant.now().plusSeconds(response.getExpiresInSeconds()));
                return CompletableFuture.completedFuture(token.getToken());
            });
        }

        return CompletableFuture.completedFuture(token.getToken());
    }

    /**
     * Exchange a client id and client secret for an access token.
     * @return The credentials flow response
     */
    private CompletableFuture<CredentialsFlowResponse> exchangeToken()
            throws ApiException, FgaInvalidParameterException {
        try {
            byte[] body = apiClient.getObjectMapper().writeValueAsBytes(authRequest);

            Configuration config = new Configuration().apiUrl(tokenEndpointUrl);

            HttpRequest.Builder requestBuilder = ApiClient.requestBuilder("POST", "", body, config);

            HttpRequest request = requestBuilder.build();

            return new HttpRequestAttempt<>(request, "exchangeToken", CredentialsFlowResponse.class, apiClient, config)
                    .attemptHttpRequest()
                    .thenApply(ApiResponse::getData);
        } catch (IOException e) {
            throw new ApiException(e);
        }
    }

    private static String buildTokenEndpointUrl(String issuer) {
        var uri = URI.create(issuer);

        if (uri.getScheme() == null) {
            uri = URI.create("https://" + issuer);
        }

        if (uri.getPath().isEmpty() || uri.getPath().equals("/")) {
            uri = URI.create(uri.getScheme() + "://" + uri.getAuthority() + DEFAULT_TOKEN_ENDPOINT_PATH);
        }

        return uri.toString();
    }
}
