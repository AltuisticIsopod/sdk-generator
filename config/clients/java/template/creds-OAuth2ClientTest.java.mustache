package {{authPackage}};

import static org.hamcrest.Matchers.is;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pgssoft.httpclient.HttpClientMock;
import {{clientPackage}}.ApiClient;
import {{configPackage}}.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;


class OAuth2ClientTest {
    private static final String CLIENT_ID = "client";
    private static final String CLIENT_SECRET = "secret";
    private static final String AUDIENCE = "audience";
    private static final String GRANT_TYPE = "client_credentials";
    private static final String ACCESS_TOKEN = "0123456789";

    private final ObjectMapper mapper = new ObjectMapper();
    private HttpClientMock mockHttpClient;

    private static Stream<Arguments> issuersTokenEndpoint() {
        return Stream.of(
                Arguments.of("issuer.fga.example", "https://issuer.fga.example/oauth/token"),
                Arguments.of("https://issuer.fga.example", "https://issuer.fga.example/oauth/token"),
                Arguments.of("https://issuer.fga.example/", "https://issuer.fga.example/oauth/token"),
                Arguments.of("https://issuer.fga.example:8080", "https://issuer.fga.example:8080/oauth/token"),
                Arguments.of("https://issuer.fga.example:8080/", "https://issuer.fga.example:8080/oauth/token"),
                Arguments.of("issuer.fga.example/some_endpoint", "https://issuer.fga.example/some_endpoint"),
                Arguments.of("https://issuer.fga.example/some_endpoint", "https://issuer.fga.example/some_endpoint"),
                Arguments.of("https://issuer.fga.example:8080/some_endpoint", "https://issuer.fga.example:8080/some_endpoint")
        );
    }

    @ParameterizedTest
    @MethodSource("issuersTokenEndpoint")
    public void exchangeToken(String apiTokenIssuer, String tokenEndpointUrl) throws Exception {
        // Given
        OAuth2Client oAuth2 = configureClient(apiTokenIssuer);
        String expectedPostBody = String.format(
                "{\"client_id\":\"%s\",\"client_secret\":\"%s\",\"audience\":\"%s\",\"grant_type\":\"%s\"}",
                CLIENT_ID, CLIENT_SECRET, AUDIENCE, GRANT_TYPE);
        String responseBody = String.format("{\"access_token\":\"%s\"}", ACCESS_TOKEN);
        mockHttpClient.onPost(tokenEndpointUrl).withBody(is(expectedPostBody)).doReturn(200, responseBody);

        // When
        String result = oAuth2.getAccessToken().get();

        // Then
        mockHttpClient.verify().post(tokenEndpointUrl).withBody(is(expectedPostBody)).called();
        assertEquals(ACCESS_TOKEN, result);
    }

    private OAuth2Client configureClient(String apiTokenIssuer) {
        System.setProperty("HttpRequestAttempt.debug-logging", "enable");

        mockHttpClient = new HttpClientMock();
        mockHttpClient.debugOn();

        var credentials = new Credentials(new ClientCredentials()
                .clientId(CLIENT_ID)
                .clientSecret(CLIENT_SECRET)
                .apiAudience(AUDIENCE)
                .apiTokenIssuer(apiTokenIssuer));

        var configuration = new Configuration().apiUrl("").credentials(credentials);

        var apiClient = mock(ApiClient.class);
        when(apiClient.getHttpClient()).thenReturn(mockHttpClient);
        when(apiClient.getObjectMapper()).thenReturn(mapper);

        return new OAuth2Client(configuration, apiClient);
    }
}
