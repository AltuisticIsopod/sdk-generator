{{>licenseInfo}}
package {{clientPackage}};

import static {{utilPackage}}.StringUtil.isNullOrWhitespace;

import {{apiPackage}}.*;
import {{configPackage}}.*;
import {{modelPackage}}.*;
import {{errorsPackage}}.*;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class OpenFgaClient {
    private final ApiClient apiClient;
    private ClientConfiguration configuration;
    private OpenFgaApi api;

    private static final String CLIENT_BULK_REQUEST_ID_HEADER = "{{clientBulkRequestIdHeader}}";
    private static final String CLIENT_METHOD_HEADER = "{{clientMethodHeader}}";
    private static final int DEFAULT_MAX_METHOD_PARALLEL_REQS = {{clientMaxMethodParallelRequests}};

    public OpenFgaClient(ClientConfiguration configuration) throws FgaInvalidParameterException {
        this(configuration, new ApiClient());
    }

    public OpenFgaClient(ClientConfiguration configuration, ApiClient apiClient) throws FgaInvalidParameterException {
        this.apiClient = apiClient;
        this.configuration = configuration;
        this.api = new OpenFgaApi(configuration, apiClient);
    }

    /* ***********
     * Utilities *
     *************/

    public void setStoreId(String storeId) {
        configuration.storeId(storeId);
    }

    public void setAuthorizationModelId(String authorizationModelId) {
        configuration.authorizationModelId(authorizationModelId);
    }
    
    public void setConfiguration(ClientConfiguration configuration) throws FgaInvalidParameterException {
        this.configuration = configuration;
        this.api = new OpenFgaApi(configuration, apiClient);
    }

    /* ********
     * Stores *
     **********/

    /**
     * ListStores - Get a paginated list of stores.
     */
    public CompletableFuture<ClientListStoresResponse> listStores() throws FgaInvalidParameterException {
        configuration.assertValid();
        return call(() -> api.listStores(null, null)).thenApply(ClientListStoresResponse::new);
    }

    public CompletableFuture<ClientListStoresResponse> listStores(ClientListStoresOptions options)
            throws FgaInvalidParameterException {
        configuration.assertValid();
        return call(() -> api.listStores(options.getPageSize(), options.getContinuationToken()))
                .thenApply(ClientListStoresResponse::new);
    }

    /**
     * CreateStore - Initialize a store
     */
    public CompletableFuture<ClientCreateStoreResponse> createStore(CreateStoreRequest request)
            throws FgaInvalidParameterException {
        configuration.assertValid();
        return call(() -> api.createStore(request)).thenApply(ClientCreateStoreResponse::new);
    }

    /**
     * GetStore - Get information about the current store.
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientGetStoreResponse> getStore() throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();
        return call(() -> api.getStore(storeId)).thenApply(ClientGetStoreResponse::new);
    }

    /**
     * DeleteStore - Delete a store
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientDeleteStoreResponse> deleteStore() throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();
        return call(() -> api.deleteStore(storeId)).thenApply(ClientDeleteStoreResponse::new);
    }

    /* **********************
     * Authorization Models *
     ************************/

    /**
     * ReadAuthorizationModels - Read all authorization models
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientReadAuthorizationModelsResponse> readAuthorizationModels()
            throws FgaInvalidParameterException {
        return readAuthorizationModels(null);
    }

    /**
     * ReadAuthorizationModels - Read all authorization models
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientReadAuthorizationModelsResponse> readAuthorizationModels(
            ClientReadAuthorizationModelsOptions options) throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();

        Integer pageSize;
        String continuationToken;

        if (options != null) {
            pageSize = options.getPageSize();
            continuationToken = options.getContinuationToken();
        } else {
            // null are valid for these values
            continuationToken = null;
            pageSize = null;
        }

        return call(() -> api.readAuthorizationModels(storeId, pageSize, continuationToken))
                .thenApply(ClientReadAuthorizationModelsResponse::new);
    }

    /**
     * WriteAuthorizationModel - Create a new version of the authorization model
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientWriteAuthorizationModelResponse> writeAuthorizationModel(
            WriteAuthorizationModelRequest request) throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();
        return call(() -> api.writeAuthorizationModel(storeId, request))
                .thenApply(ClientWriteAuthorizationModelResponse::new);
    }

    /**
     * ReadAuthorizationModel - Read the current authorization model
     *
     * @throws FgaInvalidParameterException When either the Store ID or Authorization Model ID are null, empty, or whitespace
     */
    public CompletableFuture<ClientReadAuthorizationModelResponse> readAuthorizationModel()
            throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();
        String authorizationModelId = configuration.getAuthorizationModelIdChecked();
        return call(() -> api.readAuthorizationModel(storeId, authorizationModelId))
                .thenApply(ClientReadAuthorizationModelResponse::new);
    }

    /**
     * ReadAuthorizationModel - Read the current authorization model
     *
     * @throws FgaInvalidParameterException When either the Store ID or Authorization Model ID are null, empty, or whitespace
     */
    public CompletableFuture<ClientReadAuthorizationModelResponse> readAuthorizationModel(
            ClientReadAuthorizationModelOptions options) throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();
        String authorizationModelId = options.getAuthorizationModelIdChecked();
        return call(() -> api.readAuthorizationModel(storeId, authorizationModelId))
                .thenApply(ClientReadAuthorizationModelResponse::new);
    }

    /**
     * ReadLatestAuthorizationModel - Read the latest authorization model for the current store
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientReadAuthorizationModelResponse> readLatestAuthorizationModel()
            throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();
        return call(() -> api.readAuthorizationModels(storeId, 1, null))
                .thenApply(ClientReadAuthorizationModelResponse::latestOf);
    }

    /* *********************
     * Relationship Tuples *
     ***********************/

    /**
     * Read Changes - Read the list of historical relationship tuple writes and deletes
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientReadChangesResponse> readChanges(ClientReadChangesOptions options)
            throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();
        return call(() -> api.readChanges(
                        storeId, options.getType(), options.getPageSize(), options.getContinuationToken()))
                .thenApply(ClientReadChangesResponse::new);
    }

    /**
     * Read - Read tuples previously written to the store (does not evaluate)
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientReadResponse> read(ClientReadRequest request) throws FgaInvalidParameterException {
        return read(request, null);
    }

    /**
     * Read - Read tuples previously written to the store (does not evaluate)
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientReadResponse> read(ClientReadRequest request, ClientReadOptions options)
            throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();

        ReadRequest body = new ReadRequest();

        if (request != null && (request.getUser() != null || request.getRelation() != null || request.getObject() != null)) {
            TupleKey tupleKey = new TupleKey();
            tupleKey.user(request.getUser()).relation(request.getRelation())._object(request.getObject());
            body.tupleKey(tupleKey);
        }

        if (options != null) {
            body.pageSize(options.getPageSize()).continuationToken(options.getContinuationToken());
        }

        return call(() -> api.read(storeId, body)).thenApply(ClientReadResponse::new);
    }

    /**
     * Write - Create or delete relationship tuples
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientWriteResponse> write(ClientWriteRequest request)
            throws FgaInvalidParameterException {
        return write(request, null);
    }

    /**
     * Write - Create or delete relationship tuples
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientWriteResponse> write(ClientWriteRequest request, ClientWriteOptions options)
            throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();

        WriteRequest body = new WriteRequest();

        if (request != null) {
            TupleKeys writes = ClientTupleKey.asTupleKeys(request.getWrites());
            if (!writes.getTupleKeys().isEmpty()) {
                body.writes(writes);
            }

            TupleKeys deletes = ClientTupleKey.asTupleKeys(request.getDeletes());
            if (!deletes.getTupleKeys().isEmpty()) {
                body.deletes(deletes);
            }
        }

        if (options != null && !isNullOrWhitespace(options.getAuthorizationModelId())) {
            body.authorizationModelId(options.getAuthorizationModelId());
        } else {
            String authorizationModelId = configuration.getAuthorizationModelId();
            body.authorizationModelId(authorizationModelId);
        }

        return call(() -> api.write(storeId, body)).thenApply(ClientWriteResponse::new);
    }

    /**
     * WriteTuples - Utility method to write tuples, wraps Write
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientWriteResponse> writeTuples(List<ClientTupleKey> tupleKeys)
            throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();

        var request = new WriteRequest().writes(ClientTupleKey.asTupleKeys(tupleKeys));
        String authorizationModelId = configuration.getAuthorizationModelId();
        if (!isNullOrWhitespace(authorizationModelId)) {
            request.authorizationModelId(authorizationModelId);
        }

        return call(() -> api.write(storeId, request)).thenApply(ClientWriteResponse::new);
    }

    /**
     * DeleteTuples - Utility method to delete tuples, wraps Write
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientWriteResponse> deleteTuples(List<ClientTupleKey> tupleKeys)
            throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();

        var request = new WriteRequest().deletes(ClientTupleKey.asTupleKeys(tupleKeys));
        String authorizationModelId = configuration.getAuthorizationModelId();
        if (!isNullOrWhitespace(authorizationModelId)) {
            request.authorizationModelId(authorizationModelId);
        }

        return call(() -> api.write(storeId, request)).thenApply(ClientWriteResponse::new);
    }

    /* **********************
     * Relationship Queries *
     ***********************/

    /**
     * Check - Check if a user has a particular relation with an object (evaluates)
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientCheckResponse> check(ClientCheckRequest request)
            throws FgaInvalidParameterException {
        return check(request, null);
    }

    /**
     * Check - Check if a user has a particular relation with an object (evaluates)
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientCheckResponse> check(ClientCheckRequest request, ClientCheckOptions options)
            throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();

        CheckRequest body = new CheckRequest();

        if (request != null) {
            body.tupleKey(new TupleKey()
                    .user(request.getUser())
                    .relation(request.getRelation())
                    ._object(request.getObject()));
        }

        if (options != null && !isNullOrWhitespace(options.getAuthorizationModelId())) {
            body.authorizationModelId(options.getAuthorizationModelId());
        } else {
            String authorizationModelId = configuration.getAuthorizationModelId();
            body.authorizationModelId(authorizationModelId);
        }

        return call(() -> api.check(storeId, body)).thenApply(ClientCheckResponse::new);
    }

    /**
     * BatchCheck - Run a set of checks (evaluates)
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    // TODO

    /**
     * Expand - Expands the relationships in userset tree format (evaluates)
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientExpandResponse> expand(ClientExpandRequest request)
            throws FgaInvalidParameterException {
        return expand(request, null);
    }

    /**
     * Expand - Expands the relationships in userset tree format (evaluates)
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientExpandResponse> expand(ClientExpandRequest request, ClientExpandOptions options)
            throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();

        ExpandRequest body = new ExpandRequest();

        if (request != null) {
            body.tupleKey(new TupleKey()
                    .relation(request.getRelation())
                    ._object(request.getObject()));
        }

        if (options != null && !isNullOrWhitespace(options.getAuthorizationModelId())) {
            body.authorizationModelId(options.getAuthorizationModelId());
        } else {
            String authorizationModelId = configuration.getAuthorizationModelId();
            body.authorizationModelId(authorizationModelId);
        }

        return call(() -> api.expand(storeId, body)).thenApply(ClientExpandResponse::new);
    }

    /**
     * ListObjects - List the objects of a particular type that the user has a certain relation to (evaluates)
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientListObjectsResponse> listObjects(ClientListObjectsRequest request)
            throws FgaInvalidParameterException {
        return listObjects(request, null);
    }

    /**
     * ListObjects - List the objects of a particular type that the user has a certain relation to (evaluates)
     *
     * @throws FgaInvalidParameterException When the Store ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientListObjectsResponse> listObjects(
            ClientListObjectsRequest request, ClientListObjectsOptions options) throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();

        ListObjectsRequest body = new ListObjectsRequest();

        if (request != null) {
            body.user(request.getUser())
                    .relation(request.getRelation())
                    .type(request.getType())
                    .contextualTuples(ClientTupleKey.asContextualTupleKeys(request.getContextualTupleKeys()));
        }

        if (options != null && !isNullOrWhitespace(options.getAuthorizationModelId())) {
            body.authorizationModelId(options.getAuthorizationModelId());
        } else {
            String authorizationModelId = configuration.getAuthorizationModelId();
            body.authorizationModelId(authorizationModelId);
        }

        return call(() -> api.listObjects(storeId, body)).thenApply(ClientListObjectsResponse::new);
    }

    /*
     * ListRelations - List all the relations a user has with an object (evaluates)
     */
    // TODO

    /* ************
     * Assertions *
     **************/

    /**
     * ReadAssertions - Read assertions for a particular authorization model
     *
     * @throws FgaInvalidParameterException When either the Store ID or Authorization Model ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientReadAssertionsResponse> readAssertions() throws FgaInvalidParameterException {
        return readAssertions(null);
    }

    /**
     * ReadAssertions - Read assertions for a particular authorization model
     *
     * @throws FgaInvalidParameterException When either the Store ID or Authorization Model ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientReadAssertionsResponse> readAssertions(ClientReadAssertionsOptions options)
            throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();

        String authorizationModelId;
        if (options != null && options.hasValidAuthorizationModelId()) {
            authorizationModelId = options.getAuthorizationModelId();
        } else {
            authorizationModelId = configuration.getAuthorizationModelIdChecked();
        }

        return call(() -> api.readAssertions(storeId, authorizationModelId))
                .thenApply(ClientReadAssertionsResponse::new);
    }

    /**
     * WriteAssertions - Updates assertions for a particular authorization model
     *
     * @throws FgaInvalidParameterException When either the Store ID or Authorization Model ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientWriteAssertionsResponse> writeAssertions(List<ClientAssertion> assertions)
            throws FgaInvalidParameterException {
        return writeAssertions(assertions, null);
    }

    /**
     * WriteAssertions - Updates assertions for a particular authorization model
     *
     * @throws FgaInvalidParameterException When either the Store ID or Authorization Model ID is null, empty, or whitespace
     */
    public CompletableFuture<ClientWriteAssertionsResponse> writeAssertions(
            List<ClientAssertion> assertions, ClientWriteAssertionsOptions options)
            throws FgaInvalidParameterException {
        configuration.assertValid();
        String storeId = configuration.getStoreIdChecked();

        String authorizationModelId;
        if (options != null && options.hasValidAuthorizationModelId()) {
            authorizationModelId = options.getAuthorizationModelId();
        } else {
            authorizationModelId = configuration.getAuthorizationModelIdChecked();
        }

        WriteAssertionsRequest body = new WriteAssertionsRequest().assertions(ClientAssertion.asAssertions(assertions));

        return call(() -> api.writeAssertions(storeId, authorizationModelId, body))
                .thenApply(ClientWriteAssertionsResponse::new);
    }

    /**
     * A {@link FunctionalInterface} for calling a low-level API from {@link OpenFgaApi}. It wraps exceptions
     * encountered with {@link CompletableFuture#failedFuture(Throwable)}
     *
     * @param <R> The type of API response
     */
    @FunctionalInterface
    private interface CheckedInvocation<R> {
        CompletableFuture<R> call() throws FgaInvalidParameterException, ApiException;
    }

    private <T> CompletableFuture<T> call(CheckedInvocation<T> action) {
        try {
            return action.call();
        } catch (FgaInvalidParameterException | ApiException exception) {
            return CompletableFuture.failedFuture(exception);
        }
    }
}
