{{>licenseInfo}}

package {{clientPackage}};

import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pgssoft.httpclient.HttpClientMock;
import {{invokerPackage}}.*;
import {{modelPackage}}.*;
import {{configPackage}}.*;
import {{errorsPackage}}.*;
import java.time.Duration;
import java.util.List;
import java.util.concurrent.ExecutionException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * API tests for OpenFgaClient
 */
public class OpenFgaClientTest {
    private static final String DEFAULT_STORE_ID = "01YCP46JKYM8FJCQ37NMBYHE5X";
    private static final String DEFAULT_STORE_NAME = "test_store";
    private static final String DEFAULT_AUTH_MODEL_ID = "01G5JAVJ41T49E9TT3SKVS7X1J";
    private static final String DEFAULT_USER = "user:81684243-9356-4421-8fbf-a4f8d36aa31b";
    private static final String DEFAULT_RELATION = "reader";
    private static final String DEFAULT_TYPE = "document";
    private static final String DEFAULT_OBJECT = "document:budget";
    private static final String DEFAULT_SCHEMA_VERSION = "1.1";
    public static final String EMPTY_RESPONSE_BODY = "{}";

    private OpenFgaClient fga;
    private ClientConfiguration clientConfiguration;
    private HttpClientMock mockHttpClient;

    @BeforeEach
    public void beforeEachTest() throws Exception {
        mockHttpClient = new HttpClientMock();

        clientConfiguration = new ClientConfiguration()
                .storeId(DEFAULT_STORE_ID)
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .apiUrl("https://localhost")
                .credentials(new Credentials())
                .readTimeout(Duration.ofMillis(250));

        ApiClient mockApiClient = mock(ApiClient.class);
        when(mockApiClient.getHttpClient()).thenReturn(mockHttpClient);
        when(mockApiClient.getObjectMapper()).thenReturn(new ObjectMapper());

        fga = new OpenFgaClient(mockApiClient, clientConfiguration);
    }

    /* ******************
     * Credential tests *
     ********************/
    @Test
    public void createStore_withApiToken() throws Exception {
        // Given
        String apiToken = "some-static-token";
        clientConfiguration.credentials(new Credentials(new ApiToken(apiToken)));
        fga.setConfiguration(clientConfiguration);
        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost("https://localhost/stores")
                .withBody(is(expectedBody))
                .withHeader("Authorization", String.format("Bearer %s", apiToken))
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);

        // When
        CreateStoreResponse response = fga.createStore(request).get();

        // Then
        mockHttpClient
                .verify()
                .post("https://localhost/stores")
                .withBody(is(expectedBody))
                .withHeader("Authorization", String.format("Bearer %s", apiToken))
                .called(1);
        assertEquals(DEFAULT_STORE_ID, response.getId());
        assertEquals(DEFAULT_STORE_NAME, response.getName());
    }

    @Test
    public void createStore_withClientCredentials() throws Exception {
        // Given
        String apiTokenIssuer = "oauth2.server";
        String clientId = "some-client-id";
        String clientSecret = "some-client-secret";
        String apiToken = "some-generated-token";
        String apiAudience = "some-audience";
        clientConfiguration.credentials(new Credentials(new ClientCredentials()
                .clientId(clientId)
                .clientSecret(clientSecret)
                .apiTokenIssuer(apiTokenIssuer)
                .apiAudience(apiAudience)));
        fga.setConfiguration(clientConfiguration);

        String expectedOAuth2Body = String.format(
                "{\"client_id\":\"%s\",\"client_secret\":\"%s\",\"audience\":\"%s\",\"grant_type\":\"client_credentials\"}",
                clientId, clientSecret, apiAudience);
        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost(String.format("https://%s/oauth/token", apiTokenIssuer))
                .withBody(is(expectedOAuth2Body))
                .doReturn(200, String.format("{\"access_token\":\"%s\"}", apiToken));
        mockHttpClient
                .onPost("https://localhost/stores")
                .withBody(is(expectedBody))
                .withHeader("Authorization", String.format("Bearer %s", apiToken))
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);

        // When
        // We call two times to ensure the token is cached after the first request.
        CreateStoreResponse response1 = fga.createStore(request).get();
        CreateStoreResponse response2 = fga.createStore(request).get();

        // Then
        // OAuth2 server should be called 1 time.
        mockHttpClient
                .verify()
                .post(String.format("https://%s/oauth/token", apiTokenIssuer))
                .called(1);
        // OpenFGA server should be called 2 times.
        mockHttpClient
                .verify()
                .post("https://localhost/stores")
                .withBody(is(expectedBody))
                .withHeader("Authorization", String.format("Bearer %s", apiToken))
                .called(2);
        assertEquals(DEFAULT_STORE_ID, response1.getId());
        assertEquals(DEFAULT_STORE_NAME, response1.getName());
        assertEquals(DEFAULT_STORE_ID, response2.getId());
        assertEquals(DEFAULT_STORE_NAME, response2.getName());
    }

    /**
     * List all stores.
     */
    @Test
    public void listStoresTest() throws Exception {
        // Given
        String responseBody =
                String.format("{\"stores\":[{\"id\":\"%s\",\"name\":\"%s\"}]}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient.onGet("https://localhost/stores").doReturn(200, responseBody);

        // When
        ListStoresResponse response = fga.listStores().get();

        // Then
        mockHttpClient.verify().get("https://localhost/stores").called(1);
        assertNotNull(response.getStores());
        assertEquals(1, response.getStores().size());
        assertEquals(DEFAULT_STORE_ID, response.getStores().get(0).getId());
        assertEquals(DEFAULT_STORE_NAME, response.getStores().get(0).getName());
    }

    @Test
    public void listStoresTest_withOptions() throws Exception {
        // Given
        String responseBody =
                String.format("{\"stores\":[{\"id\":\"%s\",\"name\":\"%s\"}]}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        int pageSize = 10;
        String continuationToken = "continuationToken";
        String getUrl = String.format(
                "https://localhost/stores?page_size=%d&continuation_token=%s", pageSize, continuationToken);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);
        ListStoresOptions options = new ListStoresOptions().pageSize(pageSize).continuationToken(continuationToken);

        // When
        ListStoresResponse response = fga.listStores(options).get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getStores());
        assertEquals(1, response.getStores().size());
        assertEquals(DEFAULT_STORE_ID, response.getStores().get(0).getId());
        assertEquals(DEFAULT_STORE_NAME, response.getStores().get(0).getName());
    }

    /**
     * Create a store.
     */
    @Test
    public void createStoreTest() throws Exception {
        // Given
        String expectedBody = String.format("{\"name\":\"%s\"}", DEFAULT_STORE_NAME);
        String requestBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient
                .onPost("https://localhost/stores")
                .withBody(is(expectedBody))
                .doReturn(201, requestBody);
        CreateStoreRequest request = new CreateStoreRequest().name(DEFAULT_STORE_NAME);

        // When
        CreateStoreResponse response = fga.createStore(request).get();

        // Then
        mockHttpClient
                .verify()
                .post("https://localhost/stores")
                .withBody(is(expectedBody))
                .called(1);
        assertEquals(DEFAULT_STORE_ID, response.getId());
        assertEquals(DEFAULT_STORE_NAME, response.getName());
    }

    @Test
    public void createStore_bodyRequired() {
        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.createStore(null).get());

        // Then
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals("Missing the required parameter 'body' when calling createStore", exception.getMessage());
    }

    @Test
    public void createStore_400() throws Exception {
        // Given
        mockHttpClient
                .onPost("https://localhost/stores")
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.createStore(new CreateStoreRequest())
                        .get());

        // Then
        mockHttpClient.verify().post("https://localhost/stores").called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void createStore_404() throws Exception {
        // Given
        mockHttpClient
                .onPost("https://localhost/stores")
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.createStore(new CreateStoreRequest())
                        .get());

        // Then
        mockHttpClient.verify().post("https://localhost/stores").called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void createStore_500() throws Exception {
        // Given
        mockHttpClient
                .onPost("https://localhost/stores")
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.createStore(new CreateStoreRequest())
                        .get());

        // Then
        mockHttpClient.verify().post("https://localhost/stores").called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    /**
     * Get a store.
     */
    @Test
    public void getStoreTest() throws Exception {
        // Given
        String getUrl = String.format("https://localhost/stores/%s", DEFAULT_STORE_ID);
        String responseBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", DEFAULT_STORE_ID, DEFAULT_STORE_NAME);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        GetStoreResponse response = fga.getStore().get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertEquals(DEFAULT_STORE_ID, response.getId());
        assertEquals(DEFAULT_STORE_NAME, response.getName());
    }

    @Test
    public void getStore_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.getStore().get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void getStore_400() throws Exception {
        // Given
        String getUrl = String.format("https://localhost/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.getStore().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void getStore_404() throws Exception {
        // Given
        String getUrl = String.format("https://localhost/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.getStore().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void getStore_500() throws Exception {
        // Given
        String getUrl = String.format("https://localhost/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.getStore().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    /**
     * Delete a store.
     */
    @Test
    public void deleteStoreTest() throws Exception {
        // Given
        String deleteUrl = String.format("https://localhost/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient.onDelete(deleteUrl).doReturn(204, EMPTY_RESPONSE_BODY);

        // When
        fga.deleteStore().get();

        // Then
        mockHttpClient.verify().delete(deleteUrl).called(1);
    }

    @Test
    public void deleteStore_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.deleteStore().get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void deleteStore_400() {
        // Given
        String deleteUrl = String.format("https://localhost/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onDelete(deleteUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.deleteStore().get());

        // Then
        mockHttpClient.verify().delete(deleteUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void deleteStore_404() {
        // Given
        String deleteUrl = String.format("https://localhost/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onDelete(deleteUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.deleteStore().get());

        // Then
        mockHttpClient.verify().delete(deleteUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void deleteStore_500() {
        // Given
        String deleteUrl = String.format("https://localhost/stores/%s", DEFAULT_STORE_ID);
        mockHttpClient
                .onDelete(deleteUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.deleteStore().get());

        // Then
        mockHttpClient.verify().delete(deleteUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    /**
     * Return all the authorization models for a particular store.
     */
    @Test
    public void readAuthorizationModelsTest() throws Exception {
        // Given
        String getUrl = String.format("https://localhost/stores/%s/authorization-models", DEFAULT_STORE_ID);
        var options = new ReadAuthorizationModelsOptions();
        String responseBody = String.format(
                "{\"authorization_models\":[{\"id\":\"%s\",\"schema_version\":\"%s\"}]}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_SCHEMA_VERSION);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        ReadAuthorizationModelsResponse response =
                fga.readAuthorizationModels(options).get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getAuthorizationModels());
        assertEquals(1, response.getAuthorizationModels().size());
        AuthorizationModel authModel = response.getAuthorizationModels().get(0);
        assertEquals(DEFAULT_AUTH_MODEL_ID, authModel.getId());
        assertEquals(DEFAULT_SCHEMA_VERSION, authModel.getSchemaVersion());
    }

    @Test
    public void readAuthorizationModels_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);
        var options = new ReadAuthorizationModelsOptions();

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.readAuthorizationModels(options)
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void readAuthorizationModels_400() {
        // Given
        String getUrl = String.format("https://localhost/stores/%s/authorization-models", DEFAULT_STORE_ID);
        var options = new ReadAuthorizationModelsOptions();
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.readAuthorizationModels(options)
                        .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void readAuthorizationModels_404() {
        // Given
        String getUrl = String.format("https://localhost/stores/%s/authorization-models", DEFAULT_STORE_ID);
        var options = new ReadAuthorizationModelsOptions();
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.readAuthorizationModels(options)
                        .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void readAuthorizationModels_500() throws Exception {
        // Given
        String getUrl = String.format("https://localhost/stores/%s/authorization-models", DEFAULT_STORE_ID);
        var options = new ReadAuthorizationModelsOptions();
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.readAuthorizationModels(options)
                        .get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    @Test
    public void readLatestAuthorizationModelTest() throws Exception {
        // Given
        String getUrl = String.format("https://localhost/stores/%s/authorization-models?page_size=1", DEFAULT_STORE_ID);
        String responseBody = String.format(
                "{\"authorization_models\":[{\"id\":\"%s\",\"schema_version\":\"%s\"}]}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_SCHEMA_VERSION);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        ReadAuthorizationModelResponse response = fga.readLatestAuthorizationModel().get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getAuthorizationModel());
        AuthorizationModel authModel = response.getAuthorizationModel();
        assertEquals(DEFAULT_AUTH_MODEL_ID, authModel.getId());
        assertEquals(DEFAULT_SCHEMA_VERSION, authModel.getSchemaVersion());
    }

    @Test
    public void readChanges() throws Exception {
        // Given
        String changeType = "repo";
        String user = "user:81684243-9356-4421-8fbf-a4f8d36aa31b";
        String relation = "viewer";
        String object = "document:roadmap";
        String continuationToken = "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ";

        ReadChangesOptions options = new ReadChangesOptions().type(changeType);
        String getUrl = String.format("https://localhost/stores/%s/changes?type=%s", DEFAULT_STORE_ID, changeType);
        String responseBody = String.format(
                "{\"changes\":[{\"tuple_key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"},\"operation\":\"TUPLE_OPERATION_WRITE\"}],\"continuation_token\":\"%s\"}",
                user, relation, object, continuationToken);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        ReadChangesResponse response = fga.readChanges(options).get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertEquals(continuationToken, response.getContinuationToken());
        assertNotNull(response.getChanges());
        assertEquals(1, response.getChanges().size());
        TupleChange change = response.getChanges().get(0);
        assertEquals(TupleOperation.WRITE, change.getOperation());
        TupleKey tupleKey = change.getTupleKey();
        assertNotNull(tupleKey);
        assertEquals(user, tupleKey.getUser());
        assertEquals(relation, tupleKey.getRelation());
        assertEquals(object, tupleKey.getObject());
    }

    /**
     * Create a new authorization model.
     */
    @Test
    public void writeAuthorizationModelTest() throws Exception {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/authorization-models", DEFAULT_STORE_ID);
        String expectedBody =
                "{\"type_definitions\":[{\"type\":\"document\",\"relations\":{},\"metadata\":null}],\"schema_version\":\"1.1\"}";
        String responseBody = String.format("{\"authorization_model_id\":\"%s\"}", DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postUrl).withBody(is(expectedBody)).doReturn(201, responseBody);
        WriteAuthorizationModelRequest request = new WriteAuthorizationModelRequest()
                .schemaVersion(DEFAULT_SCHEMA_VERSION)
                .typeDefinitions(List.of(new TypeDefinition().type(DEFAULT_TYPE)));

        // When
        WriteAuthorizationModelResponse response =
                fga.writeAuthorizationModel(request).get();

        // Then
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
        assertEquals(DEFAULT_AUTH_MODEL_ID, response.getAuthorizationModelId());
    }

    @Test
    public void writeAuthorizationModel_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.writeAuthorizationModel(
                        new WriteAuthorizationModelRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void writeAuthorizationModel_bodyRequired() {
        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.writeAuthorizationModel(null)
                        .get());

        // Then
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(
                "Missing the required parameter 'body' when calling writeAuthorizationModel", exception.getMessage());
    }

    @Test
    public void writeAuthorizationModel_400() throws Exception {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/authorization-models", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.writeAuthorizationModel(new WriteAuthorizationModelRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void writeAuthorizationModel_404() {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/authorization-models", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.writeAuthorizationModel(new WriteAuthorizationModelRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void writeAuthorizationModel_500() {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/authorization-models", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.writeAuthorizationModel(new WriteAuthorizationModelRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    /**
     * Return a particular version of an authorization model.
     */
    @Test
    public void readAuthorizationModelTest() throws Exception {
        // Given
        String getUrl = String.format(
                "https://localhost/stores/%s/authorization-models/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        String getResponse = String.format(
                "{\"authorization_model\":{\"id\":\"%s\",\"schema_version\":\"%s\"}}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_SCHEMA_VERSION);
        mockHttpClient.onGet(getUrl).doReturn(200, getResponse);

        // When
        ReadAuthorizationModelResponse response = fga.readAuthorizationModel().get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getAuthorizationModel());
        assertEquals(DEFAULT_AUTH_MODEL_ID, response.getAuthorizationModel().getId());
        assertEquals(DEFAULT_SCHEMA_VERSION, response.getAuthorizationModel().getSchemaVersion());
    }

    @Test
    public void readAuthorizationModelTest_withOptions() throws Exception {
        // Given
        String authorizationModelId = "alternateAuthorizationModelId";
        ReadAuthorizationModelOptions options = new ReadAuthorizationModelOptions().authorizationModelId(authorizationModelId);
        String getUrl = String.format(
                "https://localhost/stores/%s/authorization-models/%s", DEFAULT_STORE_ID, authorizationModelId);
        String getResponse = String.format(
                "{\"authorization_model\":{\"id\":\"%s\",\"schema_version\":\"%s\"}}",
                authorizationModelId, DEFAULT_SCHEMA_VERSION);
        mockHttpClient.onGet(getUrl).doReturn(200, getResponse);

        // When
        ReadAuthorizationModelResponse response = fga.readAuthorizationModel(options).get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getAuthorizationModel());
        assertEquals(authorizationModelId, response.getAuthorizationModel().getId());
        assertEquals(DEFAULT_SCHEMA_VERSION, response.getAuthorizationModel().getSchemaVersion());
    }

    @Test
    public void readAuthorizationModel_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.readAuthorizationModel()
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void readAuthorizationModel_idRequired() {
        // Given
        clientConfiguration.authorizationModelId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.readAuthorizationModel()
                .get());

        // Then
        assertEquals(
                "Required parameter authorizationModelId was invalid when calling ClientConfiguration.",
                exception.getMessage());
    }

    @Test
    public void readAuthorizationModel_400() {
        // Given
        String getUrl = String.format(
                "https://localhost/stores/%s/authorization-models/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAuthorizationModel().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void readAuthorizationModel_404() throws Exception {
        // Given
        String getUrl = String.format(
                "https://localhost/stores/%s/authorization-models/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAuthorizationModel().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void readAuthorizationModel_500() throws Exception {
        // Given
        String getUrl = String.format(
                "https://localhost/stores/%s/authorization-models/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAuthorizationModel().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    /**
     * Get tuples from the store that matches a query, without following userset rewrite rules.
     */
    @Test
    public void readTest() throws Exception {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/read", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"object\":\"%s\",\"relation\":\"%s\",\"user\":\"%s\"},\"page_size\":null,\"continuation_token\":null}",
                DEFAULT_OBJECT, DEFAULT_RELATION, DEFAULT_USER);
        String responseBody = String.format(
                "{\"tuples\":[{\"key\":{\"user\":\"%s\",\"relation\":\"%s\",\"object\":\"%s\"}}]}",
                DEFAULT_USER, DEFAULT_RELATION, DEFAULT_OBJECT);
        mockHttpClient.onPost(postUrl).withBody(is(expectedBody)).doReturn(200, responseBody);
        ClientReadRequest request = new ClientReadRequest()
                .user(DEFAULT_USER)
                .relation(DEFAULT_RELATION)
                ._object(DEFAULT_OBJECT);

        // When
        ReadResponse response = fga.read(request).get();

        // Then
        mockHttpClient.verify().post(postUrl).withBody(is(expectedBody)).called(1);
        assertNotNull(response.getTuples());
        assertEquals(1, response.getTuples().size());
        TupleKey key = response.getTuples().get(0).getKey();
        assertNotNull(key);
        assertEquals(DEFAULT_USER, key.getUser());
        assertEquals(DEFAULT_RELATION, key.getRelation());
        assertEquals(DEFAULT_OBJECT, key.getObject());
    }

    @Test
    public void read_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.read(new ClientReadRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void read_400() {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/read", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.read(new ClientReadRequest()).get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void read_404() {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/read", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.read(new ClientReadRequest()).get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void read_500() {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/read", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.read(new ClientReadRequest()).get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    /**
     * Add or delete tuples from the store.
     */
    @Test
    public void writeTest_writes() throws Exception {
        // Given
        String postPath = "https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        String expectedBody = String.format(
                "{\"writes\":{\"tuple_keys\":[{\"object\":\"%s\",\"relation\":\"%s\",\"user\":\"%s\"}]},\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                DEFAULT_OBJECT, DEFAULT_RELATION, DEFAULT_USER, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        ClientWriteRequest request = new ClientWriteRequest()
                .writes(List.of(new TupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER)));

        // When
        fga.write(request);

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
    }

    /**
     * Add or delete tuples from the store.
     */
    @Test
    public void writeTest_deletes() throws Exception {
        // Given
        String postPath = "https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        String expectedBody = String.format(
                "{\"writes\":null,\"deletes\":{\"tuple_keys\":[{\"object\":\"%s\",\"relation\":\"%s\",\"user\":\"%s\"}]},\"authorization_model_id\":\"%s\"}",
                DEFAULT_OBJECT, DEFAULT_RELATION, DEFAULT_USER, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        ClientWriteRequest request = new ClientWriteRequest()
                .deletes(List.of(new TupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER)));

        // When
        fga.write(request);

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
    }

    @Test
    public void writeTuplesTest() throws Exception {
        // Given
        String postPath = String.format("https://localhost/stores/%s/write", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"writes\":{\"tuple_keys\":[{\"object\":\"%s\",\"relation\":\"%s\",\"user\":\"%s\"}]},\"deletes\":null,\"authorization_model_id\":\"%s\"}",
                DEFAULT_OBJECT, DEFAULT_RELATION, DEFAULT_USER, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        TupleKeys tuples = new TupleKeys()
                .tupleKeys(List.of(new TupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER)));

        // When
        fga.writeTuples(tuples);

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
    }

    @Test
    public void deleteTuplesTest() throws Exception {
        // Given
        String postPath = String.format("https://localhost/stores/%s/write", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"writes\":null,\"deletes\":{\"tuple_keys\":[{\"object\":\"%s\",\"relation\":\"%s\",\"user\":\"%s\"}]},\"authorization_model_id\":\"%s\"}",
                DEFAULT_OBJECT, DEFAULT_RELATION, DEFAULT_USER, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        TupleKeys tuples = new TupleKeys()
                .tupleKeys(List.of(new TupleKey()
                        ._object(DEFAULT_OBJECT)
                        .relation(DEFAULT_RELATION)
                        .user(DEFAULT_USER)));

        // When
        fga.deleteTuples(tuples);

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
    }

    @Test
    public void write_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.write(new ClientWriteRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void write_400() throws Exception {
        // Given
        String postUrl = "https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.write(new ClientWriteRequest()).get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void write_404() throws Exception {
        // Given
        String postUrl = "https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.write(new ClientWriteRequest()).get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void write_500() throws Exception {
        // Given
        String postUrl = "https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/write";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.write(new ClientWriteRequest()).get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    /**
     * Check whether a user is authorized to access an object.
     */
    @Test
    public void check() throws Exception {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/check", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"tuple_key\":{\"object\":\"%s\",\"relation\":\"%s\",\"user\":\"%s\"},\"contextual_tuples\":null,\"authorization_model_id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",\"trace\":null}",
                DEFAULT_OBJECT, DEFAULT_RELATION, DEFAULT_USER);
        mockHttpClient.onPost(postUrl)
                .withBody(is(expectedBody))
                .doReturn(200, "{\"allowed\":true}");
        ClientCheckRequest request = new ClientCheckRequest()
                ._object(DEFAULT_OBJECT)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER);
        ClientCheckOptions options = new ClientCheckOptions().authorizationModelId(DEFAULT_AUTH_MODEL_ID);

        // When
        CheckResponse response = fga.check(request, options).get();

        // Then
        mockHttpClient.verify().post(postUrl)
                .withBody(is(expectedBody))
                .called(1);
        assertEquals(Boolean.TRUE, response.getAllowed());
    }

    @Test
    public void check_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.check(new ClientCheckRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void check_400() throws Exception {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/check", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.check(new ClientCheckRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void check_404() throws Exception {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/check", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.check(new ClientCheckRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void check_500() throws Exception {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/check", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.check(new ClientCheckRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    /**
     * Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason
     * about and debug a certain relationship.
     */
    @Test
    public void expandTest() throws Exception {
        // Given
        String postPath = "https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand";
        String expectedBody = String.format(
                "{\"tuple_key\":{\"object\":\"%s\",\"relation\":\"%s\",\"user\":\"%s\"},\"authorization_model_id\":\"%s\"}",
                DEFAULT_OBJECT, DEFAULT_RELATION, DEFAULT_USER, DEFAULT_AUTH_MODEL_ID);
        String responseBody = String.format(
                "{\"tree\":{\"root\":{\"union\":{\"nodes\":[{\"leaf\":{\"users\":{\"users\":[\"%s\"]}}}]}}}}",
                DEFAULT_USER);
        mockHttpClient.onPost(postPath).withBody(is(expectedBody)).doReturn(200, responseBody);
        ClientExpandRequest request = new ClientExpandRequest()
                .user(DEFAULT_USER)
                .relation(DEFAULT_RELATION)
                ._object(DEFAULT_OBJECT);
        ClientExpandOptions options = new ClientExpandOptions()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID);

        // When
        ExpandResponse response = fga.expand(request, options).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        assertNotNull(response.getTree());
        assertNotNull(response.getTree().getRoot());
        assertNotNull(response.getTree().getRoot().getUnion());
        assertNotNull(response.getTree().getRoot().getUnion().getNodes());
        assertEquals(1, response.getTree().getRoot().getUnion().getNodes().size());
        assertNotNull(response.getTree().getRoot().getUnion().getNodes().get(0));
        Node node = response.getTree().getRoot().getUnion().getNodes().get(0);
        assertNotNull(node.getLeaf());
        assertNotNull(node.getLeaf().getUsers());
        assertNotNull(node.getLeaf().getUsers().getUsers());
        assertEquals(1, node.getLeaf().getUsers().getUsers().size());
        assertEquals(DEFAULT_USER, node.getLeaf().getUsers().getUsers().get(0));
    }

    @Test
    public void expand_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.expand(new ClientExpandRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void expand_400() throws Exception {
        // Given
        String postUrl = "https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.expand(new ClientExpandRequest()).get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void expand_404() throws Exception {
        // Given
        String postUrl = "https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.expand(new ClientExpandRequest()).get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void expand_500() throws Exception {
        // Given
        String postUrl = "https://localhost/stores/01YCP46JKYM8FJCQ37NMBYHE5X/expand";
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.expand(new ClientExpandRequest()).get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    /**
     * List all objects of the given type that the user has a relation with.
     */
    @Test
    public void listObjectsTest() throws Exception {
        // Given
        String postPath = String.format("https://localhost/stores/%s/list-objects", DEFAULT_STORE_ID);
        String expectedBody = String.format(
                "{\"authorization_model_id\":\"%s\",\"type\":null,\"relation\":\"%s\",\"user\":\"%s\",\"contextual_tuples\":null}",
                DEFAULT_AUTH_MODEL_ID, DEFAULT_RELATION, DEFAULT_USER);
        mockHttpClient
                .onPost(postPath)
                .withBody(is(expectedBody))
                .doReturn(200, String.format("{\"objects\":[\"%s\"]}", DEFAULT_OBJECT));
        ListObjectsRequest request = new ListObjectsRequest()
                .authorizationModelId(DEFAULT_AUTH_MODEL_ID)
                .relation(DEFAULT_RELATION)
                .user(DEFAULT_USER);

        // When
        ListObjectsResponse response = fga.listObjects(request).get();

        // Then
        mockHttpClient.verify().post(postPath).withBody(is(expectedBody)).called(1);
        assertEquals(List.of(DEFAULT_OBJECT), response.getObjects());
    }

    @Test
    public void listObjects_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(FgaInvalidParameterException.class, () -> fga.listObjects(new ListObjectsRequest())
                .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void listObjects_bodyRequired() {
        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.listObjects(null).get());

        // Then
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals("Missing the required parameter 'body' when calling listObjects", exception.getMessage());
    }

    @Test
    public void listObjects_400() throws Exception {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/list-objects", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.listObjects(new ListObjectsRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void listObjects_404() throws Exception {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/list-objects", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.listObjects(new ListObjectsRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void listObjects_500() throws Exception {
        // Given
        String postUrl = String.format("https://localhost/stores/%s/list-objects", DEFAULT_STORE_ID);
        mockHttpClient
                .onPost(postUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.listObjects(new ListObjectsRequest())
                        .get());

        // Then
        mockHttpClient.verify().post(postUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    /**
     * Read assertions for an authorization model ID.
     */
    @Test
    public void readAssertionsTest() throws Exception {
        // Given
        String getUrl =
                String.format("https://localhost/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        String responseBody = String.format(
                "{\"assertions\":[{\"tuple_key\":{\"object\":\"%s\",\"relation\":\"%s\",\"user\":\"%s\"},\"expectation\":true}]}",
                DEFAULT_OBJECT, DEFAULT_RELATION, DEFAULT_USER);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        ReadAssertionsResponse response = fga.readAssertions().get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getAssertions());
        assertEquals(1, response.getAssertions().size());
        Assertion assertion = response.getAssertions().get(0);
        assertNotNull(assertion);
        assertTrue(assertion.getExpectation());
        assertEquals(DEFAULT_OBJECT, assertion.getTupleKey().getObject());
        assertEquals(DEFAULT_RELATION, assertion.getTupleKey().getRelation());
        assertEquals(DEFAULT_USER, assertion.getTupleKey().getUser());
    }

    @Test
    public void readAssertions_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.readAssertions().get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void readAssertions_authModelIdRequired() {
        // Given
        clientConfiguration.authorizationModelId(null);

        // When
        var exception = assertThrows(
                FgaInvalidParameterException.class, () -> fga.readAssertions().get());

        // Then
        assertEquals(
                "Required parameter authorizationModelId was invalid when calling ClientConfiguration.",
                exception.getMessage());
    }

    @Test
    public void readAssertions_400() throws Exception {
        // Given
        String getUrl =
                String.format("https://localhost/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAssertions().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void readAssertions_404() throws Exception {
        // Given
        String getUrl =
                String.format("https://localhost/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAssertions().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void readAssertions_500() throws Exception {
        // Given
        String getUrl =
                String.format("https://localhost/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onGet(getUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.readAssertions().get());

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    /**
     * Upsert assertions for an authorization model ID.
     */
    @Test
    public void writeAssertionsTest() throws Exception {
        // Given
        String putUrl =
                String.format("https://localhost/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        String expectedBody = String.format(
                "{\"assertions\":[{\"tuple_key\":{\"object\":\"%s\",\"relation\":\"%s\",\"user\":\"%s\"},\"expectation\":true}]}",
                DEFAULT_OBJECT, DEFAULT_RELATION, DEFAULT_USER);
        mockHttpClient.onPut(putUrl).withBody(is(expectedBody)).doReturn(200, EMPTY_RESPONSE_BODY);
        WriteAssertionsRequest request = new WriteAssertionsRequest()
                .assertions(List.of(new Assertion()
                        .tupleKey(new TupleKey()
                                ._object(DEFAULT_OBJECT)
                                .relation(DEFAULT_RELATION)
                                .user(DEFAULT_USER))
                        .expectation(true)));

        // When
        fga.writeAssertions(request).get();

        // Then
        mockHttpClient.verify().put(putUrl).withBody(is(expectedBody)).called(1);
    }

    @Test
    public void writeAssertions_storeIdRequired() {
        // Given
        clientConfiguration.storeId(null);

        // When
        var exception =
                assertThrows(FgaInvalidParameterException.class, () -> fga.writeAssertions(new WriteAssertionsRequest())
                        .get());

        // Then
        assertEquals(
                "Required parameter storeId was invalid when calling ClientConfiguration.", exception.getMessage());
    }

    @Test
    public void writeAssertions_authModelIdRequired() {
        // Given
        clientConfiguration.authorizationModelId(null);

        // When
        var exception =
                assertThrows(FgaInvalidParameterException.class, () -> fga.writeAssertions(new WriteAssertionsRequest())
                        .get());

        // Then
        assertEquals(
                "Required parameter authorizationModelId was invalid when calling ClientConfiguration.",
                exception.getMessage());
    }

    @Test
    public void writeAssertions_bodyRequired() {
        // When
        ExecutionException execException = assertThrows(
                ExecutionException.class, () -> fga.writeAssertions(null).get());

        // Then
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals("Missing the required parameter 'body' when calling writeAssertions", exception.getMessage());
    }

    @Test
    public void writeAssertions_400() throws Exception {
        // Given
        String putUrl =
                String.format("https://localhost/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPut(putUrl)
                .doReturn(400, "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.writeAssertions(new WriteAssertionsRequest())
                        .get());

        // Then
        mockHttpClient.verify().put(putUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(400, exception.getCode());
        assertEquals(
                "{\"code\":\"validation_error\",\"message\":\"Generic validation error\"}",
                exception.getResponseBody());
    }

    @Test
    public void writeAssertions_404() throws Exception {
        // Given
        String putUrl =
                String.format("https://localhost/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPut(putUrl)
                .doReturn(404, "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.writeAssertions(new WriteAssertionsRequest())
                        .get());

        // Then
        mockHttpClient.verify().put(putUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(404, exception.getCode());
        assertEquals(
                "{\"code\":\"undefined_endpoint\",\"message\":\"Endpoint not enabled\"}", exception.getResponseBody());
    }

    @Test
    public void writeAssertions_500() throws Exception {
        // Given
        String putUrl =
                String.format("https://localhost/stores/%s/assertions/%s", DEFAULT_STORE_ID, DEFAULT_AUTH_MODEL_ID);
        mockHttpClient
                .onPut(putUrl)
                .doReturn(500, "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}");

        // When
        ExecutionException execException =
                assertThrows(ExecutionException.class, () -> fga.writeAssertions(new WriteAssertionsRequest())
                        .get());

        // Then
        mockHttpClient.verify().put(putUrl).called(1);
        ApiException exception = assertInstanceOf(ApiException.class, execException.getCause());
        assertEquals(500, exception.getCode());
        assertEquals(
                "{\"code\":\"internal_error\",\"message\":\"Internal Server Error\"}", exception.getResponseBody());
    }

    /**
     * Miscellaneous client behavior tests.
     */
    @Test
    public void setStoreId() throws Exception {
        // Given
        String alternateStoreId = "A_UNIQUE_ID";
        fga.setStoreId(alternateStoreId);
        String getUrl = String.format("https://localhost/stores/%s", alternateStoreId);
        String responseBody = String.format("{\"id\":\"%s\",\"name\":\"%s\"}", alternateStoreId, DEFAULT_STORE_NAME);
        mockHttpClient.onGet(getUrl).doReturn(200, responseBody);

        // When
        GetStoreResponse response = fga.getStore().get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertEquals(alternateStoreId, response.getId());
        assertEquals(DEFAULT_STORE_NAME, response.getName());
        assertEquals(
                alternateStoreId,
                clientConfiguration.getStoreId(),
                "OpenFgaClient.setStoreId(String) is expected to persist its Store ID in its ClientConfiguration."
                        + "If this behavior ever changes, it could be a subtle breaking change.");
    }

    @Test
    public void setAuthorizationModelId() throws Exception {
        // Given
        String alternateAuthorizationModelId = "A_UNIQUE_ID";
        fga.setAuthorizationModelId(alternateAuthorizationModelId);
        String getUrl = String.format(
                "https://localhost/stores/%s/authorization-models/%s", DEFAULT_STORE_ID, alternateAuthorizationModelId);
        String getResponse = String.format(
                "{\"authorization_model\":{\"id\":\"%s\",\"schema_version\":\"%s\"}}",
                alternateAuthorizationModelId, DEFAULT_SCHEMA_VERSION);
        mockHttpClient.onGet(getUrl).doReturn(200, getResponse);

        // When
        ReadAuthorizationModelResponse response = fga.readAuthorizationModel().get();

        // Then
        mockHttpClient.verify().get(getUrl).called(1);
        assertNotNull(response.getAuthorizationModel());
        assertEquals(
                alternateAuthorizationModelId, response.getAuthorizationModel().getId());
        assertEquals(DEFAULT_SCHEMA_VERSION, response.getAuthorizationModel().getSchemaVersion());
        assertEquals(
                alternateAuthorizationModelId,
                clientConfiguration.getAuthorizationModelId(),
                "OpenFgaClient.setAuthorizationModelId(String) is expected to persist its Authorization Model ID in its ClientConfiguration."
                        + "If this behavior ever changes, it could be a subtle breaking change.");
    }
}
