diff --git a/api.ts b/api.ts
index 327e5e1..9c46cb9 100755
--- a/api.ts
+++ b/api.ts
@@ -137,10 +137,11 @@ export const OpenFgaApiAxiosParamCreator = function (configuration: Configuratio
     /**
          * Create a unique OpenFGA store which will be used to store authorization models and relationship tuples.
          * @summary Create a store
+         * @param {CreateStoreRequest} body
          * @param {*} [options] Override http request option.
          * @throws { FgaError }
          */
-    createStore: async (options: any = {}): Promise<RequestArgs> => {
+    createStore: async (body: CreateStoreRequest, options: any = {}): Promise<RequestArgs> => {
             
       const localVarPath = "/stores"
             
@@ -317,11 +318,12 @@ export const OpenFgaApiAxiosParamCreator = function (configuration: Configuratio
     /**
          * Returns a paginated list of OpenFGA stores.
          * @summary List all stores
+         * @param {number} [pageSize]
          * @param {string} [continuationToken]
          * @param {*} [options] Override http request option.
          * @throws { FgaError }
          */
-    listStores: async (continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
+    listStores: async (pageSize?: number, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
             
       const localVarPath = "/stores"
             
@@ -702,11 +704,12 @@ export const OpenFgaApiFp = function(configuration: Configuration) {
     /**
          * Create a unique OpenFGA store which will be used to store authorization models and relationship tuples.
          * @summary Create a store
+         * @param {CreateStoreRequest} body
          * @param {*} [options] Override http request option.
          * @throws { FgaError }
          */
-    async createStore(options?: any): Promise<(axios?: AxiosStatic) => PromiseResult<CreateStoreResponse>> {
-      const localVarAxiosArgs = await localVarAxiosParamCreator.createStore(options);
+    async createStore(body: CreateStoreRequest, options?: any): Promise<(axios?: AxiosStatic) => PromiseResult<CreateStoreResponse>> {
+      const localVarAxiosArgs = await localVarAxiosParamCreator.createStore(body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
     },
     /**
@@ -754,12 +757,13 @@ export const OpenFgaApiFp = function(configuration: Configuration) {
     /**
          * Returns a paginated list of OpenFGA stores.
          * @summary List all stores
+         * @param {number} [pageSize]
          * @param {string} [continuationToken]
          * @param {*} [options] Override http request option.
          * @throws { FgaError }
          */
-    async listStores(continuationToken?: string, options?: any): Promise<(axios?: AxiosStatic) => PromiseResult<ListStoresResponse>> {
-      const localVarAxiosArgs = await localVarAxiosParamCreator.listStores(continuationToken, options);
+    async listStores(pageSize?: number, continuationToken?: string, options?: any): Promise<(axios?: AxiosStatic) => PromiseResult<ListStoresResponse>> {
+      const localVarAxiosArgs = await localVarAxiosParamCreator.listStores(pageSize, continuationToken, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
     },
     /**
@@ -877,11 +881,12 @@ export const OpenFgaApiFactory = function (configuration: Configuration, axios?:
     /**
          * Create a unique OpenFGA store which will be used to store authorization models and relationship tuples.
          * @summary Create a store
+         * @param {CreateStoreRequest} body
          * @param {*} [options] Override http request option.
          * @throws { FgaError }
          */
-    createStore(options?: any): PromiseResult<CreateStoreResponse> {
-      return localVarFp.createStore(options).then((request) => request(axios));
+    createStore(body: CreateStoreRequest, options?: any): PromiseResult<CreateStoreResponse> {
+      return localVarFp.createStore(body, options).then((request) => request(axios));
     },
     /**
          * Delete an OpenFGA store. This does not delete the data associated with the store, like tuples or authorization models.
@@ -924,12 +929,13 @@ export const OpenFgaApiFactory = function (configuration: Configuration, axios?:
     /**
          * Returns a paginated list of OpenFGA stores.
          * @summary List all stores
+         * @param {number} [pageSize]
          * @param {string} [continuationToken]
          * @param {*} [options] Override http request option.
          * @throws { FgaError }
          */
-    listStores(continuationToken?: string, options?: any): PromiseResult<ListStoresResponse> {
-      return localVarFp.listStores(continuationToken, options).then((request) => request(axios));
+    listStores(pageSize?: number, continuationToken?: string, options?: any): PromiseResult<ListStoresResponse> {
+      return localVarFp.listStores(pageSize, continuationToken, options).then((request) => request(axios));
     },
     /**
          * The Read API will return the tuples for a certain store that match a query filter specified in the body of the request. It is different from the `/stores/{store_id}/expand` API in that it only returns relationship tuples that are stored in the system and satisfy the query.  In the body: 1. tuple_key is optional.  If tuple_key is not specified, it will return all tuples in the store.2. `tuple_key.object` is mandatory if tuple_key is specified. It can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`). 3. `tuple_key.user` is mandatory if tuple_key is specified in the case the `tuple_key.object` is a type only. ## Examples ### Query for all objects in a type definition To query for all objects that `user:bob` has `reader` relationship in the document type definition, call read API with body of ```json {  \"tuple_key\": {      \"user\": \"user:bob\",      \"relation\": \"reader\",      \"object\": \"document:\"   } } ``` The API will return tuples and an optional continuation token, something like ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `user:bob` has a `reader` relationship with 1 document `document:2021-budget`. ### Query for all stored relationship tuples that have a particular relation and object To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {      \"object\": \"document:2021-budget\",      \"relation\": \"reader\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `document:2021-budget` has 1 `reader` (`user:bob`).  Note that the API will not return writers such as `user:anne` even when all writers are readers.  This is because only direct relationship are returned for the READ API. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {       \"object\": \"document:2021-budget\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"user:anne\",         \"relation\": \"writer\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-05T13:42:12.356Z\"     },     {       \"key\": {         \"user\": \"user:bob\",         \"relation\": \"reader\",         \"object\": \"document:2021-budget\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `document:2021-budget` has 1 `reader` (`user:bob`) and 1 `writer` (`user:anne`). 
@@ -1040,12 +1046,13 @@ export class OpenFgaApi extends BaseAPI {
   /**
      * Create a unique OpenFGA store which will be used to store authorization models and relationship tuples.
      * @summary Create a store
+     * @param {CreateStoreRequest} body
      * @param {*} [options] Override http request option.
      * @throws { FgaError }
      * @memberof OpenFgaApi
      */
-  public createStore(options?: any) {
-    return OpenFgaApiFp(this.configuration).createStore(options).then((request) => request(this.axios));
+  public createStore(body: CreateStoreRequest, options?: any) {
+    return OpenFgaApiFp(this.configuration).createStore(body, options).then((request) => request(this.axios));
   }
 
   /**
@@ -1097,13 +1104,14 @@ export class OpenFgaApi extends BaseAPI {
   /**
      * Returns a paginated list of OpenFGA stores.
      * @summary List all stores
+     * @param {number} [pageSize]
      * @param {string} [continuationToken]
      * @param {*} [options] Override http request option.
      * @throws { FgaError }
      * @memberof OpenFgaApi
      */
-  public listStores(continuationToken?: string, options?: any) {
-    return OpenFgaApiFp(this.configuration).listStores(continuationToken, options).then((request) => request(this.axios));
+  public listStores(pageSize?: number, continuationToken?: string, options?: any) {
+    return OpenFgaApiFp(this.configuration).listStores(pageSize, continuationToken, options).then((request) => request(this.axios));
   }
 
   /**
