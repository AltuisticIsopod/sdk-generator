diff --git a/api.ts b/api.ts
index 9e91ac6..c080806 100644
--- a/api.ts
+++ b/api.ts
@@ -760,6 +760,9 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.check(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "Check",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId ?? "",
+        [TelemetryAttribute.FgaClientRequestModelId]: body.authorization_model_id ?? "",
+        [TelemetryAttribute.FgaClientUser]: body.tuple_key.user
       });
     },
     /**
@@ -786,6 +789,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.deleteStore(storeId, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "DeleteStore",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId,
       });
     },
     /**
@@ -800,6 +804,8 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.expand(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "Expand",
+        [TelemetryAttribute.FgaClientRequestModelId]: body.authorization_model_id ?? "",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId ?? "",
       });
     },
     /**
@@ -813,6 +819,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.getStore(storeId, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "GetStore",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId,
       });
     },
     /**
@@ -827,10 +834,13 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.listObjects(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "ListObjects",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId ?? "",
+        [TelemetryAttribute.FgaClientRequestModelId]: body.authorization_model_id ?? "",
+        [TelemetryAttribute.FgaClientUser]: body.user
       });
     },
     /**
-         * Returns a paginated list of OpenFGA stores and a continuation token to get additional stores. The continuation token will be empty if there are no more stores. 
+         * Returns a paginated list of OpenFGA stores and a continuation token to get additional stores. The continuation token will be empty if there are no more stores.
          * @summary List all stores
          * @param {number} [pageSize]
          * @param {string} [continuationToken]
@@ -855,6 +865,8 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.listUsers(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "ListUsers",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId ?? "",
+        [TelemetryAttribute.FgaClientRequestModelId]: body.authorization_model_id ?? "",
       });
     },
     /**
@@ -869,10 +881,11 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.read(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "Read",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId,
       });
     },
     /**
-         * The ReadAssertions API will return, for a given authorization model id, all the assertions stored for it. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false. 
+         * The ReadAssertions API will return, for a given authorization model id, all the assertions stored for it. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false.
          * @summary Read assertions for an authorization model ID
          * @param {string} storeId
          * @param {string} authorizationModelId
@@ -883,6 +896,8 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.readAssertions(storeId, authorizationModelId, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "ReadAssertions",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId,
+        [TelemetryAttribute.FgaClientRequestModelId]: authorizationModelId,
       });
     },
     /**
@@ -897,6 +912,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.readAuthorizationModel(storeId, id, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "ReadAuthorizationModel",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId,
       });
     },
     /**
@@ -912,6 +928,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.readAuthorizationModels(storeId, pageSize, continuationToken, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "ReadAuthorizationModels",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId,
       });
     },
     /**
@@ -928,6 +945,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.readChanges(storeId, type, pageSize, continuationToken, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "ReadChanges",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId,
       });
     },
     /**
@@ -942,6 +960,8 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.write(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "Write",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId ?? "",
+        [TelemetryAttribute.FgaClientRequestModelId]: body.authorization_model_id ?? "",
       });
     },
     /**
@@ -957,6 +977,8 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.writeAssertions(storeId, authorizationModelId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "WriteAssertions",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId,
+        [TelemetryAttribute.FgaClientRequestModelId]: authorizationModelId,
       });
     },
     /**
@@ -971,6 +993,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.writeAuthorizationModel(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [TelemetryAttribute.FgaClientRequestMethod]: "WriteAuthorizationModel",
+        [TelemetryAttribute.FgaClientRequestStoreId]: storeId,
       });
     },
   };
@@ -1380,4 +1403,3 @@ export class OpenFgaApi extends BaseAPI {
   }
 }
