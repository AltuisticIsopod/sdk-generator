diff --git a/api.ts b/api.ts
index e45e6c2..260e0bc 100644
--- a/api.ts
+++ b/api.ts
@@ -759,6 +759,9 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.check(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "check",
+        [attributeNames.requestStoreId]: storeId,
+        [attributeNames.requestModelId]: body.authorization_model_id,
+        [attributeNames.user]: body.tuple_key.user
       });
     },
     /**
@@ -785,6 +788,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.deleteStore(storeId, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "deleteStore",
+        [attributeNames.requestStoreId]: storeId,
       });
     },
     /**
@@ -799,6 +803,8 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.expand(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "expand",
+        [attributeNames.requestModelId]: body.authorization_model_id,
+        [attributeNames.requestStoreId]: storeId,
       });
     },
     /**
@@ -812,6 +818,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.getStore(storeId, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "getStore",
+        [attributeNames.requestStoreId]: storeId,
       });
     },
     /**
@@ -826,6 +833,9 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.listObjects(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "listObjects",
+        [attributeNames.requestStoreId]: storeId,
+        [attributeNames.requestModelId]: body.authorization_model_id,
+        [attributeNames.user]: body.user
       });
     },
     /**
@@ -854,6 +864,8 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.listUsers(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "listUsers",
+        [attributeNames.requestStoreId]: storeId,
+        [attributeNames.requestModelId]: body.authorization_model_id,
       });
     },
     /**
@@ -868,6 +880,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.read(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "read",
+        [attributeNames.requestStoreId]: storeId,
       });
     },
     /**
@@ -882,6 +895,8 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.readAssertions(storeId, authorizationModelId, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "readAssertions",
+        [attributeNames.requestStoreId]: storeId,
+        [attributeNames.requestModelId]: authorizationModelId,
       });
     },
     /**
@@ -896,6 +911,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.readAuthorizationModel(storeId, id, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "readAuthorizationModel",
+        [attributeNames.requestStoreId]: storeId,
       });
     },
     /**
@@ -911,6 +927,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.readAuthorizationModels(storeId, pageSize, continuationToken, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "readAuthorizationModels",
+        [attributeNames.requestStoreId]: storeId,
       });
     },
     /**
@@ -927,6 +944,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.readChanges(storeId, type, pageSize, continuationToken, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "readChanges",
+        [attributeNames.requestStoreId]: storeId,
       });
     },
     /**
@@ -941,6 +959,8 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.write(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "write",
+        [attributeNames.requestStoreId]: storeId,
+        [attributeNames.requestModelId]: body.authorization_model_id,
       });
     },
     /**
@@ -956,6 +976,8 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.writeAssertions(storeId, authorizationModelId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "writeAssertions",
+        [attributeNames.requestStoreId]: storeId,
+        [attributeNames.requestModelId]: authorizationModelId,
       });
     },
     /**
@@ -970,6 +992,7 @@ export const OpenFgaApiFp = function(configuration: Configuration, credentials:
       const localVarAxiosArgs = localVarAxiosParamCreator.writeAuthorizationModel(storeId, body, options);
       return createRequestFunction(localVarAxiosArgs, globalAxios, configuration, credentials, {
         [attributeNames.requestMethod]: "writeAuthorizationModel",
+        [attributeNames.requestStoreId]: storeId,
       });
     },
   };