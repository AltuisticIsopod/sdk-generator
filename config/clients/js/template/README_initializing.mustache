We strongly recommend you initialize the `OpenFgaClient` only once and then re-use it throughout your app, otherwise you will incur the cost of having to re-initialize multiple times or at every request, the cost of reduced connection pooling and re-use, and would be particularly costly in the client credentials flow, as that flow will be performed on every request.

> The `{{appShortName}}Client` will by default retry API requests up to {{defaultMaxRetry}} times on 429 and 5xx errors.

#### No Credentials

```javascript
const { {{appShortName}}Client } = require('{{packageName}}'); // OR import { {{appShortName}}Client } from '{{packageName}}';

const fgaClient = new {{appShortName}}Client({
  apiUrl: process.env.FGA_API_URL, // required
  storeId: process.env.FGA_STORE_ID, // not needed when calling `CreateStore` or `ListStores`
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
});
```

#### API Token

```javascript
const { {{appShortName}}Client, CredentialsMethod } = require('{{packageName}}'); // OR import { {{appShortName}}Client, CredentialsMethod } from '{{packageName}}';

const fgaClient = new {{appShortName}}Client({
  apiUrl: process.env.FGA_API_URL, // required
  storeId: process.env.FGA_STORE_ID, // not needed when calling `CreateStore` or `ListStores`
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
  credentials: {
    method: CredentialsMethod.ApiToken,
    config: {
      token: process.env.FGA_API_TOKEN, // will be passed as the "Authorization: Bearer ${ApiToken}" request header
    }
  }
});
```

#### Client Credentials

```javascript
const { {{appShortName}}Client, CredentialsMethod } = require('{{packageName}}'); // OR import { {{appShortName}}Client, CredentialsMethod } from '{{packageName}}';

const fgaClient = new {{appShortName}}Client({
  apiUrl: process.env.FGA_API_URL, // required
  storeId: process.env.FGA_STORE_ID, // not needed when calling `CreateStore` or `ListStores`
  authorizationModelId: process.env.FGA_MODEL_ID, // Optional, can be overridden per request
  credentials: {
    method: CredentialsMethod.ClientCredentials,
    config: {
      apiTokenIssuer: process.env.FGA_API_TOKEN_ISSUER,
      apiAudience: process.env.FGA_API_AUDIENCE,
      clientId: process.env.FGA_CLIENT_ID,
      clientSecret: process.env.FGA_CLIENT_SECRET,
    }
  }
});
```

### Custom Headers

#### Default Headers

You can set default headers that will be sent with every request during client initialization:

```javascript
const { OpenFgaClient } = require('@openfga/sdk'); // OR import { OpenFgaClient } from '@openfga/sdk';

const fgaClient = new OpenFgaClient({
  apiUrl: process.env.FGA_API_URL,
  storeId: process.env.FGA_STORE_ID,
  authorizationModelId: process.env.FGA_MODEL_ID,
  baseOptions: {
    headers: {
      "X-Custom-Header": "default-value",
      "X-Request-Source": "my-app",
    }
  }
});
```

#### Per-Request Headers

You can also send custom headers on a per-request basis by using the `options` parameter. Custom headers will override any default headers set in the client configuration.

```javascript
// Add custom headers to a specific request
const result = await fgaClient.check({
  user: "user:anne",
  relation: "viewer",
  object: "document:roadmap",
}, {
  headers: {
    "X-Request-ID": "123e4567-e89b-12d3-a456-426614174000",
    "X-Custom-Header": "custom-value", // these override any default headers set
  }
});
```