{{>partial_header}}

import globalAxios, { AxiosInstance } from "axios";
import { assertParamExists, isWellFormedUriString } from "./validation";
import { FgaApiAuthenticationError, FgaError, FgaValidationError } from "./errors";

export enum CredentialsMethod {
  None = "none",
  ApiToken = "api_token",
  ClientCredentials = "client_credentials",
}

export interface ClientCredentialsConfig {
  /**
   * Client ID
   *
   * @type {string}
   * @memberof Configuration
   */
  clientId: string;
  /**
   * Client Secret
   *
   * @type {string}
   * @memberof Configuration
   */
  clientSecret: string;
  /**
   * API Token Issuer
   *
   * @type {string}
   */
  apiTokenIssuer: string;
  /**
   * API Audience
   *
   * @type {string}
   */
  apiAudience: string;
}

export interface ApiTokenConfig {
  /**
   * API Token Value
   *
   * @type {string}
   */
  token: string;
  /**
   * API Token Header Name (default = Authorization)
   *
   * @type {string}
   */
  headerName: string;
  /**
   * API Token Value Prefix (default = Bearer)
   *
   * @type {string}
   */
  headerValuePrefix: string;
}

export type AuthCredentialsConfig =
  {
    method: CredentialsMethod.None | undefined;
  } | {
    method: CredentialsMethod.ApiToken;
    config: ApiTokenConfig;
  } | {
    method: CredentialsMethod.ClientCredentials;
    config: ClientCredentialsConfig;
  } | undefined;

export class Credentials {
  private accessToken?: string;
  private accessTokenExpiryDate?: Date;

  public static init(configuration: { credentials: AuthCredentialsConfig }): Credentials {
    return new Credentials(configuration.credentials);
  }

  public constructor(private authConfig: AuthCredentialsConfig, private axios: AxiosInstance = globalAxios) {
    this.initConfig();
    this.isValid();
  }

  /**
   * Sets the default config values
   * @private
   */
  private initConfig() {
    switch (this.authConfig?.method) {
    case CredentialsMethod.ApiToken:

      if (this.authConfig.config) {
        if (!this.authConfig.config.headerName) {
          this.authConfig.config.headerName = "Authorization";
        }
        if (!this.authConfig.config.headerValuePrefix) {
          this.authConfig.config.headerValuePrefix = "Bearer";
        }
      }
      break;
    case CredentialsMethod.ClientCredentials:
    case CredentialsMethod.None:
    default:
      break;
    }
  }

  /**
   *
   * @throws {FgaValidationError}
   */
  public isValid(): boolean {
    const { authConfig } = this;
    switch (authConfig?.method) {
    case CredentialsMethod.None:
      break;
    case CredentialsMethod.ApiToken:
      assertParamExists("Credentials", "config.token", authConfig.config?.token);
      assertParamExists("Credentials", "config.headerName", authConfig.config?.headerName);
      assertParamExists("Credentials", "config.headerName", authConfig.config?.headerName);
      break;
    case CredentialsMethod.ClientCredentials:
      assertParamExists("Credentials", "config.clientId", authConfig.config?.clientId);
      assertParamExists("Credentials", "config.clientSecret", authConfig.config?.clientSecret);
      assertParamExists("Credentials", "config.apiTokenIssuer", authConfig.config?.apiTokenIssuer);
      assertParamExists("Credentials", "config.apiAudience", authConfig.config?.apiAudience);

      if (!isWellFormedUriString(`https://${authConfig.config?.apiTokenIssuer}`)) {
        throw new FgaValidationError(
          `Configuration.apiTokenIssuer does not form a valid URI (https://${authConfig.config?.apiTokenIssuer})`);
      }
      break;
    }
  }

  /**
   * Get access token, request a new one if not cached or expired
   * @return string
   */
  public async getAccessTokenHeader(): Promise<{ name: string; value: string } | undefined> {
    const accessTokenValue = await this.getAccessTokenValue();
    switch (this.authConfig?.method) {
    case CredentialsMethod.None:
      return;
    case CredentialsMethod.ApiToken:
      return {
        name: this.authConfig.config.headerName,
        value: `${this.authConfig.config.headerValuePrefix ? `${this.authConfig.config.headerValuePrefix} ` : ""}${accessTokenValue}`
      };
    case CredentialsMethod.ClientCredentials:
      return {
        name: "Authorization",
        value: `Bearer ${accessTokenValue}`
      };
    }
  }

  private async getAccessTokenValue(): Promise<string | undefined> {
    switch (this.authConfig?.method) {
    case CredentialsMethod.None:
      return;
    case CredentialsMethod.ApiToken:
      return this.authConfig.config.token;
    case CredentialsMethod.ClientCredentials:
      if (this.accessToken && (!this.accessTokenExpiryDate || this.accessTokenExpiryDate > new Date())) {
        return this.accessToken;
      }

      return this.refreshAccessToken();
    }
  }

  /**
   * Request new access token
   * @return string
   */
  private async refreshAccessToken() {
    const clientCredentials = (this.authConfig as { method: CredentialsMethod.ClientCredentials; config: ClientCredentialsConfig })?.config;

    try {
      const response = await this.axios.post(`https://${clientCredentials.apiTokenIssuer}/oauth/token`, {
        client_id: clientCredentials.clientId,
        client_secret: clientCredentials.clientSecret,
        audience: clientCredentials.apiAudience,
        grant_type: "client_credentials",
      });

      this.accessToken = response.data.access_token;
      this.accessTokenExpiryDate = new Date(Date.now() + response.data.expires_in);

      return this.accessToken;
    } catch (err: unknown) {
      if (globalAxios.isAxiosError(err)) {
        throw new FgaApiAuthenticationError(err);
      }
      throw new FgaError(err);
    }
  }
}
