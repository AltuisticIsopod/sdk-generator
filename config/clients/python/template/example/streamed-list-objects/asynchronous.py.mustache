import asyncio
import json
import os
import sys
from operator import attrgetter
from typing import Any

from dotenv import load_dotenv

sdk_path = os.path.realpath(os.path.join(os.path.abspath(__file__), "..", "..", ".."))
sys.path.insert(0, sdk_path)

from {{packageName}} import (
    ClientConfiguration,
    OpenFgaClient,
)
from {{packageName}}.client.models import (
    ClientListObjectsRequest,
    ClientTuple,
    ClientWriteRequest,
)
from {{packageName}}.models import CreateStoreRequest


class app:
    def __init__(
        self,
        client: OpenFgaClient = None,
        configuration: ClientConfiguration = None,
    ):
        self._client = client
        self._configuration = configuration

    async def fga_client(self, env: dict[str, str] = {}) -> OpenFgaClient:
        if not self._client or not self._configuration:
            load_dotenv()

            if not self._configuration:
                self._configuration = ClientConfiguration(
                    api_url=os.getenv("FGA_API_URL"),
                )

        self._client = OpenFgaClient(self._configuration)
        return self._client


def unpack(
    response,
    attr: str,
) -> Any:
    return attrgetter(attr)(response)


async def main():
    async with await app().fga_client() as fga_client:
        # Create a temporary store
        store = unpack(
            await fga_client.create_store(CreateStoreRequest(name="Test Store")),
            "id",
        )
        print(f"Created temporary store ({store})")
        fga_client.set_store_id(store)

        # Create a temporary authorization model
        model = unpack(
            await fga_client.write_authorization_model(
                json.loads(
                    '{"schema_version":"1.1","type_definitions":[{"type":"user","relations":{}},{"type":"group","relations":{"member":{"this":{}}},"metadata":{"relations":{"member":{"directly_related_user_types":[{"type":"user"}]}}}},{"type":"folder","relations":{"can_create_file":{"computedUserset":{"object":"","relation":"owner"}},"owner":{"this":{}},"parent":{"this":{}},"viewer":{"union":{"child":[{"this":{}},{"computedUserset":{"object":"","relation":"owner"}},{"tupleToUserset":{"tupleset":{"object":"","relation":"parent"},"computedUserset":{"object":"","relation":"viewer"}}}]}}},"metadata":{"relations":{"can_create_file":{"directly_related_user_types":[]},"owner":{"directly_related_user_types":[{"type":"user"}]},"parent":{"directly_related_user_types":[{"type":"folder"}]},"viewer":{"directly_related_user_types":[{"type":"user"},{"type":"user","wildcard":{}},{"type":"group","relation":"member"}]}}}},{"type":"document","relations":{"can_change_owner":{"computedUserset":{"object":"","relation":"owner"}},"owner":{"this":{}},"parent":{"this":{}},"can_read":{"union":{"child":[{"computedUserset":{"object":"","relation":"viewer"}},{"computedUserset":{"object":"","relation":"owner"}},{"tupleToUserset":{"tupleset":{"object":"","relation":"parent"},"computedUserset":{"object":"","relation":"viewer"}}}]}},"can_share":{"union":{"child":[{"computedUserset":{"object":"","relation":"owner"}},{"tupleToUserset":{"tupleset":{"object":"","relation":"parent"},"computedUserset":{"object":"","relation":"owner"}}}]}},"viewer":{"this":{}},"can_write":{"union":{"child":[{"computedUserset":{"object":"","relation":"owner"}},{"tupleToUserset":{"tupleset":{"object":"","relation":"parent"},"computedUserset":{"object":"","relation":"owner"}}}]}}},"metadata":{"relations":{"can_change_owner":{"directly_related_user_types":[]},"owner":{"directly_related_user_types":[{"type":"user"}]},"parent":{"directly_related_user_types":[{"type":"folder"}]},"can_read":{"directly_related_user_types":[]},"can_share":{"directly_related_user_types":[]},"viewer":{"directly_related_user_types":[{"type":"user"},{"type":"user","wildcard":{}},{"type":"group","relation":"member"}]},"can_write":{"directly_related_user_types":[]}}}}]}'
                )
            ),
            "authorization_model_id",
        )
        print(f"Created temporary authorization model ({model})")

        print(f"Writing 100 mock tuples to store.")

        # Write mock data
        writes = []
        for x in range(0, 100):
            writes.append(
                ClientTuple(
                    user="user:anne",
                    relation="owner",
                    object=f"document:{x}",
                )
            )

        await fga_client.write(
            ClientWriteRequest(writes),
            {
                "authorization_model_id": model,
            },
        )

        print("Listing objects using streaming endpoint:")
        results = []

        request = ClientListObjectsRequest(
            type="document",
            relation="owner",
            user="user:anne",
        )

        async for response in fga_client.streamed_list_objects(request):
            print(f"  {response}")
            results.append(response)

        print(f"API returned {results.__len__()} objects.")

        # Delete the temporary store
        try:
            await fga_client.delete_store()
            print(f"Deleted temporary store ({store})")
        except:
            pass

        print("Finished.")


if __name__ == "__main__":
    asyncio.run(main())
